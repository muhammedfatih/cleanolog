{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uGCnBf,eAIA,oBAAyBQ,GAIxBC,QAAQC,IAAI,8DAWZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,iBAAiB,WAE3D,MAAMC,EAASH,EAAOI,OAAOC,iBAEzBF,GACTA,EAAOG,MAAKC,IACXJ,EAAOK,SAASC,UAAUC,MAAM,MAAMC,SAAQ,CAACC,EAAMC,KACpD,MACMC,EAAUF,EAAKG,QADP,cACsB,IACpCR,EAAYS,OAAO,IAAIhB,EAAOiB,MAAMJ,EAAM,EAAEA,EAAOD,EAAKM,OAAO,IAC/DX,EAAYY,OAAO,IAAInB,EAAOoB,SAASP,EAAO,GAAIC,YAMtDlB,EAAQyB,cAAcC,KAAKvB,IAI5B,2B","sources":["webpack://cleanolog/external commonjs \"vscode\"","webpack://cleanolog/webpack/bootstrap","webpack://cleanolog/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\t\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"cleanolog\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\t// let disposable = vscode.commands.registerCommand('cleanolog.run', () => {\n\t// \t// The code you place here will be executed every time your command is executed\n\t// \t// Display a message box to the user\n\t// \tvscode.window.showInformationMessage('Hello World from cleanolog!');\n\t// });\n\n\tlet disposable = vscode.commands.registerCommand('cleanolog.run', function () {\n        // Get the active text editor\n        const editor = vscode.window.activeTextEditor;\n\n        if (editor) {\n\t\t\teditor.edit(editBuilder => {\n\t\t\t\teditor.document.getText().split('\\n').forEach((line, index) => {\n\t\t\t\t\tconst regex = /\u001b.*?[ |m]/gi;\n\t\t\t\t\tconst newline = line.replace(regex, '');\n\t\t\t\t\teditBuilder.delete(new vscode.Range(index,0,index, line.length+1));\n\t\t\t\t\teditBuilder.insert(new vscode.Position(index, 0), newline);\n\t\t\t\t})\n\t\t\t})\n        }\n    });\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","disposable","vscode","commands","registerCommand","editor","window","activeTextEditor","edit","editBuilder","document","getText","split","forEach","line","index","newline","replace","delete","Range","length","insert","Position","subscriptions","push"],"sourceRoot":""}